/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp/Thrift.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp/protocol/TProtocol.h>
#include <thrift/lib/cpp/transport/TTransport.h>

namespace apache { namespace thrift { namespace reflection {
class Schema;
}}}




enum City {
  NYC = 0,
  MPK = 1,
  SEA = 2,
  LON = 3
};

extern const std::map<int, const char*> _City_VALUES_TO_NAMES;

extern const std::map<const char*, int, apache::thrift::ltstr> _City_NAMES_TO_VALUES;


namespace apache { namespace thrift { 
template<>
struct TEnumTraits< ::City> : public TEnumTraitsBase< ::City>
{
inline static constexpr  ::City min() {
return  ::City::NYC;
}
inline static constexpr  ::City max() {
return  ::City::LON;
}
};
}} // apache:thrift


enum Company {
  FACEBOOK = 0,
  WHATSAPP = 1,
  OCULUS = 2,
  INSTAGRAM = 3
};

extern const std::map<int, const char*> _Company_VALUES_TO_NAMES;

extern const std::map<const char*, int, apache::thrift::ltstr> _Company_NAMES_TO_VALUES;


namespace apache { namespace thrift { 
template<>
struct TEnumTraits< ::Company> : public TEnumTraitsBase< ::Company>
{
inline static constexpr  ::Company min() {
return  ::Company::FACEBOOK;
}
inline static constexpr  ::Company max() {
return  ::Company::INSTAGRAM;
}
};
}} // apache:thrift


class Internship;

class Range;

void swap(Internship &a, Internship &b);

class Internship : public apache::thrift::TStructType<Internship> {
 public:

  static const uint64_t _reflection_id = 9022508676980868684U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  Internship() : weeks(0), employer(static_cast<Company>(0)) {
  }

  Internship(const Internship&) = default;
  Internship& operator=(const Internship& src)= default;
  Internship(Internship&&) = default;
  Internship& operator=(Internship&&) = default;

  void __clear();

  virtual ~Internship() throw() {}

  int32_t weeks;
  std::string title;
  Company employer;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      title = false;
      employer = false;
    }
    bool title;
    bool employer;
  } __isset;

  bool operator == (const Internship &) const;
  bool operator != (const Internship& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Internship & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Internship;
void merge(const Internship& from, Internship& to);
void merge(Internship&& from, Internship& to);
void swap(Range &a, Range &b);

class Range : public apache::thrift::TStructType<Range> {
 public:

  static const uint64_t _reflection_id = 7757081658652615948U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  Range() : min(0), max(0) {
  }

  Range(const Range&) = default;
  Range& operator=(const Range& src)= default;
  Range(Range&&) = default;
  Range& operator=(Range&&) = default;

  void __clear();

  virtual ~Range() throw() {}

  int32_t min;
  int32_t max;

  bool operator == (const Range &) const;
  bool operator != (const Range& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Range & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Range;
void merge(const Range& from, Range& to);
void merge(Range&& from, Range& to);


