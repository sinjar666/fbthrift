/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/Cursor.h>
#include <boost/operators.hpp>




namespace cpp2 {

class Internship;
class Range;

enum class City {
  NYC = 0,
  MPK = 1,
  SEA = 2,
  LON = 3
};

extern const std::map<City, const char*> _City_VALUES_TO_NAMES;
extern const std::map<const char*, City, apache::thrift::ltstr> _City_NAMES_TO_VALUES;

} // cpp2
namespace std {

template<> struct hash<typename  ::cpp2::City> : public apache::thrift::detail::enum_hash<typename  ::cpp2::City> {};
template<> struct equal_to<typename  ::cpp2::City> : public apache::thrift::detail::enum_equal_to<typename  ::cpp2::City> {};

} // std
namespace apache { namespace thrift {

template <> const char* TEnumTraitsBase< ::cpp2::City>::findName( ::cpp2::City value);
template <> bool TEnumTraitsBase< ::cpp2::City>::findValue(const char* name,  ::cpp2::City* outValue);

template <> constexpr  ::cpp2::City TEnumTraits< ::cpp2::City>::min() {
  return  ::cpp2::City::NYC;
}

template <> constexpr  ::cpp2::City TEnumTraits< ::cpp2::City>::max() {
  return  ::cpp2::City::LON;
}

}} // apache::thrift
namespace cpp2 {

enum class Company {
  FACEBOOK = 0,
  WHATSAPP = 1,
  OCULUS = 2,
  INSTAGRAM = 3
};

extern const std::map<Company, const char*> _Company_VALUES_TO_NAMES;
extern const std::map<const char*, Company, apache::thrift::ltstr> _Company_NAMES_TO_VALUES;

} // cpp2
namespace std {

template<> struct hash<typename  ::cpp2::Company> : public apache::thrift::detail::enum_hash<typename  ::cpp2::Company> {};
template<> struct equal_to<typename  ::cpp2::Company> : public apache::thrift::detail::enum_equal_to<typename  ::cpp2::Company> {};

} // std
namespace apache { namespace thrift {

template <> const char* TEnumTraitsBase< ::cpp2::Company>::findName( ::cpp2::Company value);
template <> bool TEnumTraitsBase< ::cpp2::Company>::findValue(const char* name,  ::cpp2::Company* outValue);

template <> constexpr  ::cpp2::Company TEnumTraits< ::cpp2::Company>::min() {
  return  ::cpp2::Company::FACEBOOK;
}

template <> constexpr  ::cpp2::Company TEnumTraits< ::cpp2::Company>::max() {
  return  ::cpp2::Company::INSTAGRAM;
}

}} // apache::thrift
namespace cpp2 {

class Internship : private boost::totally_ordered<Internship> {
 public:

  Internship() :
      weeks(0),
      employer( ::cpp2::Company()) {}
  // FragileConstructor for use in initialization lists only

  Internship(apache::thrift::FragileConstructor, int32_t weeks__arg, std::string title__arg,  ::cpp2::Company employer__arg) :
      weeks(std::move(weeks__arg)),
      title(std::move(title__arg)),
      employer(std::move(employer__arg)) {}

  Internship(Internship&&) = default;

  Internship(const Internship&) = default;

  Internship& operator=(Internship&&) = default;

  Internship& operator=(const Internship&) = default;
  void __clear();

  virtual ~Internship() throw() {}

  int32_t weeks;
  std::string title;
   ::cpp2::Company employer;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      title = false;
      employer = false;
    }

    bool title;
    bool employer;
  } __isset;
  bool operator==(const Internship& rhs) const;
  bool operator < (const Internship& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(Internship& a, Internship& b);

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Internship>::clear( ::cpp2::Internship* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Internship>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::Internship>::write(Protocol* proto, const  ::cpp2::Internship* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::Internship>::read(Protocol* proto,   ::cpp2::Internship* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::Internship>::serializedSize(Protocol* proto, const  ::cpp2::Internship* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::Internship>::serializedSizeZC(Protocol* proto, const  ::cpp2::Internship* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {

class Range : private boost::totally_ordered<Range> {
 public:

  Range() :
      min(0),
      max(0) {}
  // FragileConstructor for use in initialization lists only

  Range(apache::thrift::FragileConstructor, int32_t min__arg, int32_t max__arg) :
      min(std::move(min__arg)),
      max(std::move(max__arg)) {}

  Range(Range&&) = default;

  Range(const Range&) = default;

  Range& operator=(Range&&) = default;

  Range& operator=(const Range&) = default;
  void __clear();

  virtual ~Range() throw() {}

  int32_t min;
  int32_t max;
  bool operator==(const Range& rhs) const;

  bool operator < (const Range& rhs) const {
    if (!(min == rhs.min)) {
      return min < rhs.min;
    }
    if (!(max == rhs.max)) {
      return max < rhs.max;
    }
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(Range& a, Range& b);

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Range>::clear( ::cpp2::Range* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Range>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::Range>::write(Protocol* proto, const  ::cpp2::Range* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::Range>::read(Protocol* proto,   ::cpp2::Range* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::Range>::serializedSize(Protocol* proto, const  ::cpp2::Range* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::Range>::serializedSizeZC(Protocol* proto, const  ::cpp2::Range* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {

} // cpp2