/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "module_types.h"

#include "module_types.tcc"

#include <algorithm>

namespace cpp2 {

Animal _kAnimalValues[] = {
  Animal::DOG,
  Animal::CAT,
  Animal::TARANTULA
};

const char* _kAnimalNames[] = {
  "DOG",
  "CAT",
  "TARANTULA"
};

const std::map<Animal, const char*> _Animal_VALUES_TO_NAMES(apache::thrift::TEnumIterator<Animal>(3, _kAnimalValues, _kAnimalNames), apache::thrift::TEnumIterator<Animal>(-1, nullptr, nullptr));
const std::map<const char*, Animal, apache::thrift::ltstr> _Animal_NAMES_TO_VALUES(apache::thrift::TEnumInverseIterator<Animal>(3, _kAnimalValues, _kAnimalNames), apache::thrift::TEnumInverseIterator<Animal>(-1, nullptr, nullptr));

} // cpp2
namespace apache { namespace thrift {

template <> const char* TEnumTraitsBase< ::cpp2::Animal>::findName( ::cpp2::Animal value) {
  return findName( ::cpp2::_Animal_VALUES_TO_NAMES, value);
}

template <> bool TEnumTraitsBase< ::cpp2::Animal>::findValue(const char* name,  ::cpp2::Animal* outValue) {
  return findValue( ::cpp2::_Animal_NAMES_TO_VALUES, name, outValue);
}

}} // apache::thrift
namespace cpp2 {

template uint32_t Color::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t Color::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Color::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Color::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Color::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t Color::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Color::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Color::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void Color::__clear() {
  red = 0;
  green = 0;
  blue = 0;
  alpha = 0;
}

bool Color::operator==(const Color& rhs) const {
  if (!((red == rhs.red))) {
    return false;
  }
  if (!((green == rhs.green))) {
    return false;
  }
  if (!((blue == rhs.blue))) {
    return false;
  }
  if (!((alpha == rhs.alpha))) {
    return false;
  }
  return true;
}

void swap(Color& a, Color& b) {
  using ::std::swap;
  swap(a.red, b.red);
  swap(a.green, b.green);
  swap(a.blue, b.blue);
  swap(a.alpha, b.alpha);
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template uint32_t Vehicle::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t Vehicle::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Vehicle::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Vehicle::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Vehicle::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t Vehicle::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Vehicle::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Vehicle::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void Vehicle::__clear() {
  ::apache::thrift::Cpp2Ops<  ::cpp2::Color>::clear(&color);
  licensePlate.clear();
  description.clear();
  name.clear();
}

bool Vehicle::operator==(const Vehicle& rhs) const {
  if (!((color == rhs.color))) {
    return false;
  }
  if (!((licensePlate == rhs.licensePlate))) {
    return false;
  }
  if (!((description == rhs.description))) {
    return false;
  }
  if (!((name == rhs.name))) {
    return false;
  }
  return true;
}

void swap(Vehicle& a, Vehicle& b) {
  using ::std::swap;
  swap(a.color, b.color);
  swap(a.licensePlate, b.licensePlate);
  swap(a.description, b.description);
  swap(a.name, b.name);
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template uint32_t Person::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t Person::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Person::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Person::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Person::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t Person::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Person::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Person::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void Person::__clear() {
  id = 0;
  name = std::string();
  age.clear();
  address.clear();
  favoriteColor.clear();
  friends.clear();
  bestFriend.clear();
  petNames.clear();
  afraidOfAnimal.clear();
  vehicles.clear();
}

bool Person::operator==(const Person& rhs) const {
  if (!((id == rhs.id))) {
    return false;
  }
  if (!((name == rhs.name))) {
    return false;
  }
  if (!((age == rhs.age))) {
    return false;
  }
  if (!((address == rhs.address))) {
    return false;
  }
  if (!((favoriteColor == rhs.favoriteColor))) {
    return false;
  }
  if (!((friends == rhs.friends))) {
    return false;
  }
  if (!((bestFriend == rhs.bestFriend))) {
    return false;
  }
  if (!((petNames == rhs.petNames))) {
    return false;
  }
  if (!((afraidOfAnimal == rhs.afraidOfAnimal))) {
    return false;
  }
  if (!((vehicles == rhs.vehicles))) {
    return false;
  }
  return true;
}

void swap(Person& a, Person& b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.age, b.age);
  swap(a.address, b.address);
  swap(a.favoriteColor, b.favoriteColor);
  swap(a.friends, b.friends);
  swap(a.bestFriend, b.bestFriend);
  swap(a.petNames, b.petNames);
  swap(a.afraidOfAnimal, b.afraidOfAnimal);
  swap(a.vehicles, b.vehicles);
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

} // cpp2