/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "module_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/MoveWrapper.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace test_cpp2 { namespace cpp_reflection {

}} // test_cpp2::cpp_reflection
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

}} // test_cpp2::cpp_reflection
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

}} // test_cpp2::cpp_reflection
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t union1::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  xfer += iprot->readFieldBegin(fname, ftype, fid);
  if (ftype == apache::thrift::protocol::T_STOP) {
    this->__clear();
  } else {
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "ui") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "ud") {
        fid = 2;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "us") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "ue") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          this->set_ui();
          xfer += iprot->readI32(this->mutable_ui());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          this->set_ud();
          xfer += iprot->readDouble(this->mutable_ud());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          this->set_us();
          xfer += iprot->readString(this->mutable_us());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          this->set_ue();
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->mutable_ue() = ( ::test_cpp2::cpp_reflection::enum1)ecast0;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t union1::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union1");
  switch(this->getType()) {
    case union1::Type::ui:
    {
      xfer += prot_->serializedFieldSize("ui", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_ui());
      break;
    }
    case union1::Type::ud:
    {
      xfer += prot_->serializedFieldSize("ud", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(this->get_ud());
      break;
    }
    case union1::Type::us:
    {
      xfer += prot_->serializedFieldSize("us", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(this->get_us());
      break;
    }
    case union1::Type::ue:
    {
      xfer += prot_->serializedFieldSize("ue", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)this->get_ue());
      break;
    }
    case union1::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union1::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union1");
  switch(this->getType()) {
    case union1::Type::ui:
    {
      xfer += prot_->serializedFieldSize("ui", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_ui());
      break;
    }
    case union1::Type::ud:
    {
      xfer += prot_->serializedFieldSize("ud", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(this->get_ud());
      break;
    }
    case union1::Type::us:
    {
      xfer += prot_->serializedFieldSize("us", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(this->get_us());
      break;
    }
    case union1::Type::ue:
    {
      xfer += prot_->serializedFieldSize("ue", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)this->get_ue());
      break;
    }
    case union1::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union1::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("union1");
  switch(this->getType()) {
    case union1::Type::ui:
    {
      xfer += prot_->writeFieldBegin("ui", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(this->get_ui());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union1::Type::ud:
    {
      xfer += prot_->writeFieldBegin("ud", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->writeDouble(this->get_ud());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union1::Type::us:
    {
      xfer += prot_->writeFieldBegin("us", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->writeString(this->get_us());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union1::Type::ue:
    {
      xfer += prot_->writeFieldBegin("ue", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->writeI32((int32_t)this->get_ue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union1::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t union2::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  xfer += iprot->readFieldBegin(fname, ftype, fid);
  if (ftype == apache::thrift::protocol::T_STOP) {
    this->__clear();
  } else {
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "ui_2") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "ud_2") {
        fid = 2;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "us_2") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "ue_2") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          this->set_ui_2();
          xfer += iprot->readI32(this->mutable_ui_2());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          this->set_ud_2();
          xfer += iprot->readDouble(this->mutable_ud_2());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          this->set_us_2();
          xfer += iprot->readString(this->mutable_us_2());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          this->set_ue_2();
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->mutable_ue_2() = ( ::test_cpp2::cpp_reflection::enum1)ecast1;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t union2::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union2");
  switch(this->getType()) {
    case union2::Type::ui_2:
    {
      xfer += prot_->serializedFieldSize("ui_2", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_ui_2());
      break;
    }
    case union2::Type::ud_2:
    {
      xfer += prot_->serializedFieldSize("ud_2", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(this->get_ud_2());
      break;
    }
    case union2::Type::us_2:
    {
      xfer += prot_->serializedFieldSize("us_2", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(this->get_us_2());
      break;
    }
    case union2::Type::ue_2:
    {
      xfer += prot_->serializedFieldSize("ue_2", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)this->get_ue_2());
      break;
    }
    case union2::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union2::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union2");
  switch(this->getType()) {
    case union2::Type::ui_2:
    {
      xfer += prot_->serializedFieldSize("ui_2", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_ui_2());
      break;
    }
    case union2::Type::ud_2:
    {
      xfer += prot_->serializedFieldSize("ud_2", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(this->get_ud_2());
      break;
    }
    case union2::Type::us_2:
    {
      xfer += prot_->serializedFieldSize("us_2", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(this->get_us_2());
      break;
    }
    case union2::Type::ue_2:
    {
      xfer += prot_->serializedFieldSize("ue_2", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)this->get_ue_2());
      break;
    }
    case union2::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union2::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("union2");
  switch(this->getType()) {
    case union2::Type::ui_2:
    {
      xfer += prot_->writeFieldBegin("ui_2", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(this->get_ui_2());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union2::Type::ud_2:
    {
      xfer += prot_->writeFieldBegin("ud_2", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->writeDouble(this->get_ud_2());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union2::Type::us_2:
    {
      xfer += prot_->writeFieldBegin("us_2", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->writeString(this->get_us_2());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union2::Type::ue_2:
    {
      xfer += prot_->writeFieldBegin("ue_2", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->writeI32((int32_t)this->get_ue_2());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union2::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t union3::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  xfer += iprot->readFieldBegin(fname, ftype, fid);
  if (ftype == apache::thrift::protocol::T_STOP) {
    this->__clear();
  } else {
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "ui_3") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "ud_3") {
        fid = 2;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "us_3") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "ue_3") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          this->set_ui_3();
          xfer += iprot->readI32(this->mutable_ui_3());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          this->set_ud_3();
          xfer += iprot->readDouble(this->mutable_ud_3());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          this->set_us_3();
          xfer += iprot->readString(this->mutable_us_3());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          this->set_ue_3();
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->mutable_ue_3() = ( ::test_cpp2::cpp_reflection::enum1)ecast2;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t union3::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union3");
  switch(this->getType()) {
    case union3::Type::ui_3:
    {
      xfer += prot_->serializedFieldSize("ui_3", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_ui_3());
      break;
    }
    case union3::Type::ud_3:
    {
      xfer += prot_->serializedFieldSize("ud_3", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(this->get_ud_3());
      break;
    }
    case union3::Type::us_3:
    {
      xfer += prot_->serializedFieldSize("us_3", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(this->get_us_3());
      break;
    }
    case union3::Type::ue_3:
    {
      xfer += prot_->serializedFieldSize("ue_3", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)this->get_ue_3());
      break;
    }
    case union3::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union3::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union3");
  switch(this->getType()) {
    case union3::Type::ui_3:
    {
      xfer += prot_->serializedFieldSize("ui_3", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_ui_3());
      break;
    }
    case union3::Type::ud_3:
    {
      xfer += prot_->serializedFieldSize("ud_3", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(this->get_ud_3());
      break;
    }
    case union3::Type::us_3:
    {
      xfer += prot_->serializedFieldSize("us_3", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(this->get_us_3());
      break;
    }
    case union3::Type::ue_3:
    {
      xfer += prot_->serializedFieldSize("ue_3", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)this->get_ue_3());
      break;
    }
    case union3::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union3::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("union3");
  switch(this->getType()) {
    case union3::Type::ui_3:
    {
      xfer += prot_->writeFieldBegin("ui_3", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(this->get_ui_3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union3::Type::ud_3:
    {
      xfer += prot_->writeFieldBegin("ud_3", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->writeDouble(this->get_ud_3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union3::Type::us_3:
    {
      xfer += prot_->writeFieldBegin("us_3", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->writeString(this->get_us_3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union3::Type::ue_3:
    {
      xfer += prot_->writeFieldBegin("ue_3", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->writeI32((int32_t)this->get_ue_3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union3::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t structA::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "a") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "b") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->b);
          this->__isset.b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t structA::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structA");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->a);
  xfer += prot_->serializedFieldSize("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->b);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structA::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structA");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->a);
  xfer += prot_->serializedFieldSize("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->b);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structA::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("structA");
  xfer += prot_->writeFieldBegin("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->a);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->b);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t structB::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "c") {
        fid = 1;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "d") {
        fid = 2;
        ftype = apache::thrift::protocol::T_BOOL;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->c);
          this->__isset.c = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->d);
          this->__isset.d = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t structB::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structB");
  xfer += prot_->serializedFieldSize("c", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->c);
  xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->d);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structB::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structB");
  xfer += prot_->serializedFieldSize("c", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->c);
  xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->d);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structB::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("structB");
  xfer += prot_->writeFieldBegin("c", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->writeDouble(this->c);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("d", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->writeBool(this->d);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct1::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "field0") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "field1") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "field2") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "field3") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "field4") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "field5") {
        fid = 6;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field0);
          this->__isset.field0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->field2 = ( ::test_cpp2::cpp_reflection::enum1)ecast3;
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->field3 = ( ::test_cpp2::cpp_reflection::enum2)ecast4;
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::read(iprot, &this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::read(iprot, &this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t struct1::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct1");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field0);
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSize(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSize(prot_, &this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct1::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct1");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field0);
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSizeZC(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSizeZC(prot_, &this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct1::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct1");
  xfer += prot_->writeFieldBegin("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->field0);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32((int32_t)this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32((int32_t)this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::write(prot_, &this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::write(prot_, &this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct2::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "fieldA") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldB") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "fieldC") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldD") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldE") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldF") {
        fid = 6;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldG") {
        fid = 7;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fieldA);
          this->__isset.fieldA = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fieldB);
          this->__isset.fieldB = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->fieldC = ( ::test_cpp2::cpp_reflection::enum1)ecast5;
          this->__isset.fieldC = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->fieldD = ( ::test_cpp2::cpp_reflection::enum2)ecast6;
          this->__isset.fieldD = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::read(iprot, &this->fieldE);
          this->__isset.fieldE = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::read(iprot, &this->fieldF);
          this->__isset.fieldF = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::read(iprot, &this->fieldG);
          this->__isset.fieldG = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t struct2::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct2");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->fieldB);
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)this->fieldC);
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)this->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSize(prot_, &this->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSize(prot_, &this->fieldF);
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::serializedSize(prot_, &this->fieldG);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct2::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct2");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->fieldB);
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)this->fieldC);
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)this->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSizeZC(prot_, &this->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSizeZC(prot_, &this->fieldF);
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::serializedSizeZC(prot_, &this->fieldG);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct2::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct2");
  xfer += prot_->writeFieldBegin("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->fieldA);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->fieldB);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32((int32_t)this->fieldC);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32((int32_t)this->fieldD);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::write(prot_, &this->fieldE);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::write(prot_, &this->fieldF);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::write(prot_, &this->fieldG);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct3::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "fieldA") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldB") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "fieldC") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldD") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldE") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldF") {
        fid = 6;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldG") {
        fid = 7;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldH") {
        fid = 8;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldI") {
        fid = 9;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "fieldJ") {
        fid = 10;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "fieldK") {
        fid = 11;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "fieldL") {
        fid = 12;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "fieldM") {
        fid = 13;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "fieldN") {
        fid = 14;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "fieldO") {
        fid = 15;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "fieldP") {
        fid = 16;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "fieldQ") {
        fid = 17;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "fieldR") {
        fid = 18;
        ftype = apache::thrift::protocol::T_MAP;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fieldA);
          this->__isset.fieldA = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fieldB);
          this->__isset.fieldB = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->fieldC = ( ::test_cpp2::cpp_reflection::enum1)ecast7;
          this->__isset.fieldC = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->fieldD = ( ::test_cpp2::cpp_reflection::enum2)ecast8;
          this->__isset.fieldD = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::read(iprot, &this->fieldE);
          this->__isset.fieldE = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::read(iprot, &this->fieldF);
          this->__isset.fieldF = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::read(iprot, &this->fieldG);
          this->__isset.fieldG = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 8:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::read(iprot, &this->fieldH);
          this->__isset.fieldH = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 9:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->fieldI = std::vector<int32_t>();
          uint32_t _size9;
          apache::thrift::protocol::TType _etype12;
          xfer += iprot->readListBegin(_etype12, _size9);
          uint32_t _i13;
          if (_size9 == std::numeric_limits<uint32_t>::max()) {
            for (_i13 = 0; iprot->peekList(); _i13++) {
              this->fieldI.resize(_i13 + 1);
              xfer += iprot->readI32(this->fieldI[_i13]);
            }
          }
          else {
            this->fieldI.resize(_size9);
            for (_i13 = 0; _i13 < _size9; ++_i13) {
              xfer += iprot->readI32(this->fieldI[_i13]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.fieldI = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 10:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->fieldJ = std::vector<std::string>();
          uint32_t _size14;
          apache::thrift::protocol::TType _etype17;
          xfer += iprot->readListBegin(_etype17, _size14);
          uint32_t _i18;
          if (_size14 == std::numeric_limits<uint32_t>::max()) {
            for (_i18 = 0; iprot->peekList(); _i18++) {
              this->fieldJ.resize(_i18 + 1);
              xfer += iprot->readString(this->fieldJ[_i18]);
            }
          }
          else {
            this->fieldJ.resize(_size14);
            for (_i18 = 0; _i18 < _size14; ++_i18) {
              xfer += iprot->readString(this->fieldJ[_i18]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.fieldJ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 11:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->fieldK = std::vector<std::string>();
          uint32_t _size19;
          apache::thrift::protocol::TType _etype22;
          xfer += iprot->readListBegin(_etype22, _size19);
          uint32_t _i23;
          if (_size19 == std::numeric_limits<uint32_t>::max()) {
            for (_i23 = 0; iprot->peekList(); _i23++) {
              this->fieldK.resize(_i23 + 1);
              xfer += iprot->readString(this->fieldK[_i23]);
            }
          }
          else {
            this->fieldK.resize(_size19);
            for (_i23 = 0; _i23 < _size19; ++_i23) {
              xfer += iprot->readString(this->fieldK[_i23]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.fieldK = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 12:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->fieldL = std::vector< ::test_cpp2::cpp_reflection::structA>();
          uint32_t _size24;
          apache::thrift::protocol::TType _etype27;
          xfer += iprot->readListBegin(_etype27, _size24);
          uint32_t _i28;
          if (_size24 == std::numeric_limits<uint32_t>::max()) {
            for (_i28 = 0; iprot->peekList(); _i28++) {
              this->fieldL.resize(_i28 + 1);
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &this->fieldL[_i28]);
            }
          }
          else {
            this->fieldL.resize(_size24);
            for (_i28 = 0; _i28 < _size24; ++_i28) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &this->fieldL[_i28]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.fieldL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 13:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          this->fieldM = std::set<int32_t>();
          uint32_t _size29;
          apache::thrift::protocol::TType _etype32;
          xfer += iprot->readSetBegin(_etype32, _size29);
          uint32_t _i33;
          if (_size29 == std::numeric_limits<uint32_t>::max()) {
            for (_i33 = 0; iprot->peekSet(); _i33++) {
              int32_t _elem34;
              xfer += iprot->readI32(_elem34);
              this->fieldM.insert(std::move(_elem34));
            }
          }
          else {
            for (_i33 = 0; _i33 < _size29; ++_i33) {
              int32_t _elem35;
              xfer += iprot->readI32(_elem35);
              this->fieldM.insert(std::move(_elem35));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.fieldM = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 14:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          this->fieldN = std::set<std::string>();
          uint32_t _size36;
          apache::thrift::protocol::TType _etype39;
          xfer += iprot->readSetBegin(_etype39, _size36);
          uint32_t _i40;
          if (_size36 == std::numeric_limits<uint32_t>::max()) {
            for (_i40 = 0; iprot->peekSet(); _i40++) {
              std::string _elem41;
              xfer += iprot->readString(_elem41);
              this->fieldN.insert(std::move(_elem41));
            }
          }
          else {
            for (_i40 = 0; _i40 < _size36; ++_i40) {
              std::string _elem42;
              xfer += iprot->readString(_elem42);
              this->fieldN.insert(std::move(_elem42));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.fieldN = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 15:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          this->fieldO = std::set<std::string>();
          uint32_t _size43;
          apache::thrift::protocol::TType _etype46;
          xfer += iprot->readSetBegin(_etype46, _size43);
          uint32_t _i47;
          if (_size43 == std::numeric_limits<uint32_t>::max()) {
            for (_i47 = 0; iprot->peekSet(); _i47++) {
              std::string _elem48;
              xfer += iprot->readString(_elem48);
              this->fieldO.insert(std::move(_elem48));
            }
          }
          else {
            for (_i47 = 0; _i47 < _size43; ++_i47) {
              std::string _elem49;
              xfer += iprot->readString(_elem49);
              this->fieldO.insert(std::move(_elem49));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.fieldO = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 16:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          this->fieldP = std::set< ::test_cpp2::cpp_reflection::structB>();
          uint32_t _size50;
          apache::thrift::protocol::TType _etype53;
          xfer += iprot->readSetBegin(_etype53, _size50);
          uint32_t _i54;
          if (_size50 == std::numeric_limits<uint32_t>::max()) {
            for (_i54 = 0; iprot->peekSet(); _i54++) {
               ::test_cpp2::cpp_reflection::structB _elem55;
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_elem55);
              this->fieldP.insert(std::move(_elem55));
            }
          }
          else {
            for (_i54 = 0; _i54 < _size50; ++_i54) {
               ::test_cpp2::cpp_reflection::structB _elem56;
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_elem56);
              this->fieldP.insert(std::move(_elem56));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.fieldP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 17:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          this->fieldQ = std::map<std::string,  ::test_cpp2::cpp_reflection::structA>();
          uint32_t _size57;
          apache::thrift::protocol::TType _ktype58;
          apache::thrift::protocol::TType _vtype59;
          xfer += iprot->readMapBegin(_ktype58, _vtype59, _size57);
          uint32_t _i61;
          if (_size57 == std::numeric_limits<uint32_t>::max()) {
            for (_i61 = 0; iprot->peekMap(); _i61++) {
              std::string _key62;
              xfer += iprot->readString(_key62);
               ::test_cpp2::cpp_reflection::structA& _val63 = this->fieldQ[std::move(_key62)];
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_val63);
            }
          }
          else {
            for (_i61 = 0; _i61 < _size57; ++_i61) {
              std::string _key64;
              xfer += iprot->readString(_key64);
               ::test_cpp2::cpp_reflection::structA& _val65 = this->fieldQ[std::move(_key64)];
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_val65);
            }
          }
          xfer += iprot->readMapEnd();
          this->__isset.fieldQ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 18:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          this->fieldR = std::map<std::string,  ::test_cpp2::cpp_reflection::structB>();
          uint32_t _size66;
          apache::thrift::protocol::TType _ktype67;
          apache::thrift::protocol::TType _vtype68;
          xfer += iprot->readMapBegin(_ktype67, _vtype68, _size66);
          uint32_t _i70;
          if (_size66 == std::numeric_limits<uint32_t>::max()) {
            for (_i70 = 0; iprot->peekMap(); _i70++) {
              std::string _key71;
              xfer += iprot->readString(_key71);
               ::test_cpp2::cpp_reflection::structB& _val72 = this->fieldR[std::move(_key71)];
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val72);
            }
          }
          else {
            for (_i70 = 0; _i70 < _size66; ++_i70) {
              std::string _key73;
              xfer += iprot->readString(_key73);
               ::test_cpp2::cpp_reflection::structB& _val74 = this->fieldR[std::move(_key73)];
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val74);
            }
          }
          xfer += iprot->readMapEnd();
          this->__isset.fieldR = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t struct3::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct3");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->fieldB);
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)this->fieldC);
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)this->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSize(prot_, &this->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSize(prot_, &this->fieldF);
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::serializedSize(prot_, &this->fieldG);
  xfer += prot_->serializedFieldSize("fieldH", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSize(prot_, &this->fieldH);
  xfer += prot_->serializedFieldSize("fieldI", apache::thrift::protocol::T_LIST, 9);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, this->fieldI.size());
  for (auto _iter75 = this->fieldI.begin(); _iter75 != this->fieldI.end(); ++_iter75) {
    xfer += prot_->serializedSizeI32((*_iter75));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldJ", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->fieldJ.size());
  for (auto _iter76 = this->fieldJ.begin(); _iter76 != this->fieldJ.end(); ++_iter76) {
    xfer += prot_->serializedSizeString((*_iter76));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldK", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->fieldK.size());
  for (auto _iter77 = this->fieldK.begin(); _iter77 != this->fieldK.end(); ++_iter77) {
    xfer += prot_->serializedSizeString((*_iter77));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldL", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->fieldL.size());
  for (auto _iter78 = this->fieldL.begin(); _iter78 != this->fieldL.end(); ++_iter78) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &(*_iter78));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldM", apache::thrift::protocol::T_SET, 13);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, this->fieldM.size());
  for (auto _iter79 = this->fieldM.begin(); _iter79 != this->fieldM.end(); ++_iter79) {
    xfer += prot_->serializedSizeI32((*_iter79));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldN", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, this->fieldN.size());
  for (auto _iter80 = this->fieldN.begin(); _iter80 != this->fieldN.end(); ++_iter80) {
    xfer += prot_->serializedSizeString((*_iter80));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldO", apache::thrift::protocol::T_SET, 15);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, this->fieldO.size());
  for (auto _iter81 = this->fieldO.begin(); _iter81 != this->fieldO.end(); ++_iter81) {
    xfer += prot_->serializedSizeString((*_iter81));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldP", apache::thrift::protocol::T_SET, 16);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, this->fieldP.size());
  for (auto _iter82 = this->fieldP.begin(); _iter82 != this->fieldP.end(); ++_iter82) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &(*_iter82));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldQ", apache::thrift::protocol::T_MAP, 17);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, this->fieldQ.size());
  for (auto _iter83 = this->fieldQ.begin(); _iter83 != this->fieldQ.end(); ++_iter83) {
    xfer += prot_->serializedSizeString(_iter83->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &_iter83->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("fieldR", apache::thrift::protocol::T_MAP, 18);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, this->fieldR.size());
  for (auto _iter84 = this->fieldR.begin(); _iter84 != this->fieldR.end(); ++_iter84) {
    xfer += prot_->serializedSizeString(_iter84->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &_iter84->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct3::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct3");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->fieldB);
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)this->fieldC);
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)this->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSizeZC(prot_, &this->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSizeZC(prot_, &this->fieldF);
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::serializedSizeZC(prot_, &this->fieldG);
  xfer += prot_->serializedFieldSize("fieldH", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSizeZC(prot_, &this->fieldH);
  xfer += prot_->serializedFieldSize("fieldI", apache::thrift::protocol::T_LIST, 9);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, this->fieldI.size());
  for (auto _iter85 = this->fieldI.begin(); _iter85 != this->fieldI.end(); ++_iter85) {
    xfer += prot_->serializedSizeI32((*_iter85));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldJ", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->fieldJ.size());
  for (auto _iter86 = this->fieldJ.begin(); _iter86 != this->fieldJ.end(); ++_iter86) {
    xfer += prot_->serializedSizeString((*_iter86));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldK", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->fieldK.size());
  for (auto _iter87 = this->fieldK.begin(); _iter87 != this->fieldK.end(); ++_iter87) {
    xfer += prot_->serializedSizeString((*_iter87));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldL", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->fieldL.size());
  for (auto _iter88 = this->fieldL.begin(); _iter88 != this->fieldL.end(); ++_iter88) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &(*_iter88));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldM", apache::thrift::protocol::T_SET, 13);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, this->fieldM.size());
  for (auto _iter89 = this->fieldM.begin(); _iter89 != this->fieldM.end(); ++_iter89) {
    xfer += prot_->serializedSizeI32((*_iter89));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldN", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, this->fieldN.size());
  for (auto _iter90 = this->fieldN.begin(); _iter90 != this->fieldN.end(); ++_iter90) {
    xfer += prot_->serializedSizeString((*_iter90));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldO", apache::thrift::protocol::T_SET, 15);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, this->fieldO.size());
  for (auto _iter91 = this->fieldO.begin(); _iter91 != this->fieldO.end(); ++_iter91) {
    xfer += prot_->serializedSizeString((*_iter91));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldP", apache::thrift::protocol::T_SET, 16);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, this->fieldP.size());
  for (auto _iter92 = this->fieldP.begin(); _iter92 != this->fieldP.end(); ++_iter92) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &(*_iter92));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldQ", apache::thrift::protocol::T_MAP, 17);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, this->fieldQ.size());
  for (auto _iter93 = this->fieldQ.begin(); _iter93 != this->fieldQ.end(); ++_iter93) {
    xfer += prot_->serializedSizeString(_iter93->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &_iter93->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("fieldR", apache::thrift::protocol::T_MAP, 18);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, this->fieldR.size());
  for (auto _iter94 = this->fieldR.begin(); _iter94 != this->fieldR.end(); ++_iter94) {
    xfer += prot_->serializedSizeString(_iter94->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &_iter94->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct3::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct3");
  xfer += prot_->writeFieldBegin("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->fieldA);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->fieldB);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32((int32_t)this->fieldC);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32((int32_t)this->fieldD);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::write(prot_, &this->fieldE);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::write(prot_, &this->fieldF);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::write(prot_, &this->fieldG);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldH", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::write(prot_, &this->fieldH);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldI", apache::thrift::protocol::T_LIST, 9);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, this->fieldI.size());
  for (auto _iter95 = this->fieldI.begin(); _iter95 != this->fieldI.end(); ++_iter95) {
    xfer += prot_->writeI32((*_iter95));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldJ", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, this->fieldJ.size());
  for (auto _iter96 = this->fieldJ.begin(); _iter96 != this->fieldJ.end(); ++_iter96) {
    xfer += prot_->writeString((*_iter96));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldK", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, this->fieldK.size());
  for (auto _iter97 = this->fieldK.begin(); _iter97 != this->fieldK.end(); ++_iter97) {
    xfer += prot_->writeString((*_iter97));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldL", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRUCT, this->fieldL.size());
  for (auto _iter98 = this->fieldL.begin(); _iter98 != this->fieldL.end(); ++_iter98) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &(*_iter98));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldM", apache::thrift::protocol::T_SET, 13);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, this->fieldM.size());
  for (auto _iter99 = this->fieldM.begin(); _iter99 != this->fieldM.end(); ++_iter99) {
    xfer += prot_->writeI32((*_iter99));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldN", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRING, this->fieldN.size());
  for (auto _iter100 = this->fieldN.begin(); _iter100 != this->fieldN.end(); ++_iter100) {
    xfer += prot_->writeString((*_iter100));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldO", apache::thrift::protocol::T_SET, 15);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRING, this->fieldO.size());
  for (auto _iter101 = this->fieldO.begin(); _iter101 != this->fieldO.end(); ++_iter101) {
    xfer += prot_->writeString((*_iter101));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldP", apache::thrift::protocol::T_SET, 16);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRUCT, this->fieldP.size());
  for (auto _iter102 = this->fieldP.begin(); _iter102 != this->fieldP.end(); ++_iter102) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &(*_iter102));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldQ", apache::thrift::protocol::T_MAP, 17);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, this->fieldQ.size());
  for (auto _iter103 = this->fieldQ.begin(); _iter103 != this->fieldQ.end(); ++_iter103) {
    xfer += prot_->writeString(_iter103->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &_iter103->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldR", apache::thrift::protocol::T_MAP, 18);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, this->fieldR.size());
  for (auto _iter104 = this->fieldR.begin(); _iter104 != this->fieldR.end(); ++_iter104) {
    xfer += prot_->writeString(_iter104->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &_iter104->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

}} // test_cpp2::cpp_reflection